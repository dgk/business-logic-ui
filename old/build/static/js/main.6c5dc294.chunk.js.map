{"version":3,"sources":["utils/helpers.js","core/ProgramCard.js","features/interface/index.js","features/execution/ExecutionCard.js","features/execution/index.js","core/BusinessCard.js","features/home/index.js","history.js","features/breadcrumb/Link.js","features/breadcrumb/RouterLink.js","features/breadcrumb/index.js","features/blockly/index.js","features/program/index.js","features/version/VersionCard.js","features/version/index.js","features/App.js","utils/callApi.js","config/routes.js","models/Interface.js","models/Execution.js","models/Router.js","models/Program.js","models/Version.js","models/index.js","index.js"],"names":["getFullDate","date","m","format","ProgramCard","_ref","title","location","react","className","es_Link","to","composed","compose","inject","lifecycle","componentDidMount","this","props","interfaceStore","fetch","observer","_ref$interfaceStore$d","data","map","_ref2","id","modification_time","core_ProgramCard","key","pathname","concat","ExecutionCard","time","executionStore","_ref$executionStore$d","start_time","finish_time","execution_ExecutionCard","toString","start","finish","diff","getDateDiff","BusinessCard","children","style","cursor","margin","Wrapper","styled","div","_templateObject","core_BusinessCard","createHistory","Link","active","cx","CustomLink","link","breadcrumb_Link","breadcrumb_templateObject","defaultProps","initLocation","program","version","withHandlers","getLocation","router","history","listen","localStorage","setItem","setLocation","getNavigation","_ref3","_","filter","split","string","Boolean","isNaN","getCustomPath","_ref4","finallyLocation","lastLocationPath","finallyElement","length","backLocation","getItem","componentWillUnmount","removeItem","navigation","customPath","push","breadcrumb_Wrapper","RouterLink","findIndex","indexOf","targetLink","splice","join","Blockly","programStore","_ref$programStore$dat","VersionCard","description","versionStore","_ref$versionStore$dat","version_VersionCard","App_templateObject","App","breadcrumb","App_Wrapper","Switch","Route","path","exact","component","Home","Version","Program","Interface","Execution","Redirect","from","callApi","url","config","onRequest","onSuccess","onError","getResult","then","json","catch","error","axios","get","Object","assign","crossDomain","routes","InterfaceDataItem","types","model","code","union","null","creation_time","environment","number","InterfaceStore","isFetching","boolean","optional","array","actions","self","setData","setFetching","fetchState","setError","method","body","JSON","stringify","create","ExecutionDataItem","program_version","ExecutionStore","ProgramDataItem","program_interface","ProgramStore","VersionDataItem","is_default","VersionStore","stores","Router","Root","document","getElementById","ReactDOM","render","index_module","features_App"],"mappings":"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","file":"static/js/main.6c5dc294.chunk.js","sourcesContent":["/** @flow **/\nimport m from 'moment'\n\nexport const getFullDate = (date: string) => m(date).format('DD.MM.YYYY HH:mm:ss')\n\nexport const getDateDiff = ({ start, finish }: { start: string, finish: string }): number => (\n  m(finish).diff(m(start))\n)","/** @flow **/\nimport * as React from 'react'\nimport { Link } from 'react-router-dom'\n\ntype TProps = {\n  date: string,\n  title: string,\n  location: { pathname: string },\n}\n\nconst ProgramCard = ({\n                       date,\n                       title,\n                       location,\n                     }: TProps) => (\n  <div className='item'>\n    <i className='folder open middle aligned icon color_blue'/>\n    <div className='content'>\n      <Link to={location}>\n        {title}\n      </Link>\n      <div className='description'/>\n      <div className='description'>\n        <b>Updated:</b> <i>{date}</i>\n      </div>\n    </div>\n  </div>\n)\n\nexport default ProgramCard","/** @flow **/\nimport * as React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n  type HOC,\n} from 'recompose'\n\nimport { getFullDate } from 'Utils/helpers'\nimport ProgramCard from 'Core/ProgramCard'\n\ntype TProps = {\n  interfaceStore: {\n    data: Array<{\n      id: number,\n      modification_time: string,\n      title: string\n    }>,\n  },\n}\n\nconst Interface = ({\n                     interfaceStore: {\n                       data = [],\n                     },\n                   }: TProps) => (\n  <div className='ui relaxed divided list'>\n    {\n      data.map(({ id, modification_time, title }) => (\n        <ProgramCard\n          key={id}\n          title={title}\n          date={getFullDate(modification_time)}\n          location={{ pathname: `/interface/${id}/program` }}/>\n      ))\n    }\n  </div>\n)\n\nconst composed: HOC<*, TProps> = compose(\n  inject(\n    'interfaceStore',\n  ),\n  lifecycle({\n    componentDidMount() {\n      this.props.interfaceStore.fetch()\n    },\n  }),\n  observer,\n)\nexport default composed(Interface)","/** @flow **/\nimport * as React from 'react'\nimport { Link } from 'react-router-dom'\n\ntype TProps = {\n  date: string,\n  time: number,\n  title: string,\n}\n\nconst ExecutionCard = ({\n                         date,\n                         title,\n                         time,\n                       }: TProps) => (\n  <div className='item'>\n    <i className='asterisk middle aligned icon color_blue'/>\n    <div className='content'>\n      <Link to={{ pathname: `/execution/${title}` }}>\n        {title}\n      </Link>\n      <div className='description'/>\n      <div className='description'>\n        <b>Launched: </b>\n        <i>{date} </i>\n        <b>run time: </b>\n        <i className='color_blue'>{time}</i>\n      </div>\n    </div>\n  </div>\n)\n\nexport default ExecutionCard","/** @flow **/\nimport * as React from 'react'\nimport { observer, inject } from 'mobx-react'\nimport {\n  compose,\n  lifecycle,\n  type HOC,\n} from 'recompose'\n\nimport ExecutionCard from 'Features/execution/ExecutionCard'\nimport { getFullDate, getDateDiff } from 'Utils/helpers'\n\ntype TProps = {\n  executionStore: {\n    data: Array<{\n      id: number,\n      start_time: string,\n      title: string,\n      finish_time: string\n    }>,\n  },\n}\n\nconst Execution = ({\n                     executionStore: {\n                       data = [],\n                     },\n                   }: TProps) => (\n  <div className='ui relaxed divided list'>\n    {\n      data.map(({\n                  id,\n                  start_time,\n                  title,\n                  finish_time,\n                }) => (\n        <ExecutionCard\n          key={id}\n          title={id.toString()}\n          date={getFullDate(start_time)}\n          time={getDateDiff({ start: start_time, finish: finish_time }) / 1000}\n        />\n      ))\n    }\n  </div>\n)\n\nconst composed: HOC<*, {}> = compose(\n  inject(\n    'executionStore',\n  ),\n  lifecycle({\n    componentDidMount() {\n      this.props.executionStore.fetch()\n    },\n  }),\n  observer,\n)\nexport default composed(Execution)","/** @flow **/\nimport * as React from 'react'\n\ntype TProps = {\n  children: React.Node,\n  className: string,\n  title: string\n}\n\nconst BusinessCard = ({\n                children,\n                className,\n                title,\n              }: TProps) => (\n  <div className='card' style={{ cursor: 'pointer', margin: 20 }}>\n    <div className='content'>\n      <div className='header'><i className={className}/>{title}</div>\n      <div className='meta'/>\n      <div className='description'>\n        {children}\n      </div>\n    </div>\n  </div>\n)\n\nexport default BusinessCard","/** @flow **/\nimport * as React from 'react'\nimport { Link as RouteLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { observer } from 'mobx-react'\n\nimport Link from 'Core/BusinessCard'\n\nconst Wrapper = styled.div`\n  display: flex\n`\n\nconst Home = () => (\n  <Wrapper>\n    <RouteLink to={{ pathname: '/interface' }}>\n      <div className='ui cards'>\n        <Link className='folder open icon' title='Interfaces'>\n          List of program interfaces.\n        </Link>\n      </div>\n    </RouteLink>\n    <RouteLink to={{ pathname: '/execution' }}>\n      <div className='ui cards'>\n        <Link className='lightning icon' title='Execution'>\n          List of calculation logs.\n        </Link>\n      </div>\n    </RouteLink>\n  </Wrapper>\n)\n\nexport default observer(Home)","import createHistory from 'history/createHashHistory'\n\nexport default createHistory()\n","/** @flow **/\nimport * as React from 'react'\nimport cx from 'classnames'\n\ntype TProps = {\n  children: React.Node,\n  active?: boolean\n}\n\nconst Link = ({ children, active }: TProps) => (\n  <span className={cx('section', { active })}>\n    {children}\n  </span>\n)\n\nexport default Link\n","/** @flow **/\nimport * as React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nimport Link from 'Features/breadcrumb/Link'\n\ntype TProps = {\n  active?: boolean,\n  children: React.Node | string,\n  link: string,\n}\n\nconst CustomLink = ({\n                      active,\n                      children,\n                      link,\n                    }: TProps) => (\n  <RouterLink to={link}>\n    <Link active={active}> {children} </Link>\n  </RouterLink>\n)\n\nexport default CustomLink","/** @flow **/\nimport * as React from 'react'\nimport { Fragment } from 'react'\nimport {\n  compose,\n  defaultProps,\n  lifecycle,\n  withHandlers,\n  type HOC,\n} from 'recompose'\nimport styled from 'styled-components'\nimport { inject, observer } from 'mobx-react'\nimport _ from 'lodash'\nimport history from 'Root/history'\n\nimport RouterLink from 'Features/breadcrumb/RouterLink'\n\ntype TProps = {\n  props: {},\n  initLocation: {},\n  finallyLocation: {},\n  router: {\n    location: string,\n  },\n  getLocation: () => void,\n  getNavigation: () => Array<string>,\n  getCustomPath: (value: string) => string,\n}\n\nconst Wrapper = styled.div`\n  padding-top: 15px;\n  padding-left: 10px;\n`\n\nconst Breadcrumb = ({\n                      initLocation,\n                      router: {\n                        location,\n                      },\n                      getLocation,\n                      finallyLocation,\n                      getNavigation,\n                      getCustomPath,\n                    }: TProps) => {\n  getLocation()\n  const navigation = getNavigation()\n  const lastLocationPath = navigation[navigation.length - 1]\n\n  const customPath = getCustomPath(lastLocationPath)\n  if (customPath) {\n    navigation.push(customPath)\n  }\n\n  return (\n    <Wrapper>\n      <div className='ui breadcrumb'>\n        <Fragment>\n          <RouterLink link='/' active={!navigation.length}>\n            Home\n          </RouterLink>\n          <div className='divider'> /</div>\n          {\n            navigation.map((link) => {\n              const active = (link === lastLocationPath && !customPath) || (link === customPath)\n              const title = initLocation[link] || link\n              const backLocation = location.split('/')\n              const findIndex = backLocation.indexOf(link)\n\n              const targetLink = backLocation.splice(1,findIndex).join('/')\n\n              return (\n                <Fragment key={link}>\n                  <RouterLink link={`/${targetLink}`} active={active}>\n                    {title}\n                  </RouterLink>\n                  <div className='divider'> /</div>\n                </Fragment>\n              )\n            })\n          }\n        </Fragment>\n      </div>\n    </Wrapper>\n  )\n}\n\nconst composed: HOC<*, {}> = compose(\n  inject(\n    'router',\n  ),\n  defaultProps({\n    initLocation: {\n      'program': 'Book',\n      'version': 'Book view',\n    },\n  }),\n  withHandlers({\n    getLocation: ({ router }) => () => {\n      history.listen((location) => {\n        localStorage.setItem('backLocation', location.pathname)\n        router.setLocation(location.pathname)\n      })\n    },\n    getNavigation: ({ router: { location } }) => () => (\n      _.filter(location.split('/'), (string) => (\n        string !== Boolean && isNaN(string)\n      ))\n    ),\n    getCustomPath: ({\n                      finallyLocation,\n                      router: {\n                        location,\n                      },\n                    }) => (lastLocationPath) => {\n      const finallyElement = location.split('/')\n      if (lastLocationPath && !isNaN(finallyElement[finallyElement.length - 1])) {\n        return 'blockly'\n      }\n    },\n  }),\n  lifecycle({\n    componentDidMount() {\n      const backLocation = localStorage.getItem('backLocation') || '/'\n      if (this.props.router.location !== backLocation) {\n        this.props.router.setLocation(backLocation)\n      }\n    },\n    componentWillUnmount() {\n      localStorage.removeItem('backLocation')\n    },\n  }),\n  observer,\n)\n\nexport default composed(Breadcrumb)","/** @flow **/\nimport * as React from 'react'\n\ntype TProps = {\n  props: {}\n}\n\nconst Blockly = (props: TProps) => <div>Blockly</div>\n\nexport default Blockly\n","/** @flow **/\nimport * as React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n  type HOC,\n} from 'recompose'\n\nimport history from 'Root/history'\nimport { getFullDate } from 'Utils/helpers'\nimport ProgramCard from 'Core/ProgramCard'\n\ntype TProps = {\n  programStore: {\n    data: Array<{\n      id: number,\n      modification_time: string,\n      title: string,\n    }>,\n  },\n}\n\nconst Program = ({\n                   programStore: {\n                       data = [],\n                     },\n                   }: TProps) => (\n  <div className='ui relaxed divided list'>\n    {\n      data.map(({ id, modification_time, title }) => (\n        <ProgramCard\n          key={id}\n          title={title}\n          date={getFullDate(modification_time)}\n          location={{ pathname: `${history.location.pathname}/${id}/version` }}\n        />\n      ))\n    }\n  </div>\n)\n\nconst composed: HOC<*, TProps> = compose(\n  inject(\n    'programStore',\n  ),\n  lifecycle({\n    componentDidMount() {\n      this.props.programStore.fetch()\n    },\n  }),\n  observer,\n)\nexport default composed(Program)","/** @flow **/\nimport * as React from 'react'\nimport { Link } from 'react-router-dom'\n\ntype TProps = {\n  title: string,\n  description: string,\n  location: { pathname: string },\n}\n\nconst VersionCard = ({\n                       title,\n                       location,\n                       description,\n                     }: TProps) => (\n  <div className='item'>\n    <i className='file text middle aligned icon color_blue'/>\n    <div className='content'>\n      <Link to={location}>\n        {title}\n      </Link>\n      <div className='description'>\n        {description}\n      </div>\n    </div>\n  </div>\n)\n\nexport default VersionCard","/** @flow **/\nimport * as React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n  type HOC,\n} from 'recompose'\n\nimport history from 'Root/history'\nimport VersionCard from 'Features/version/VersionCard'\n\ntype TProps = {\n  versionStore: {\n    data: Array<{\n      id: number,\n      title: string,\n      description: string,\n    }>,\n  },\n}\n\nconst Version = ({\n                   versionStore: {\n                     data = [],\n                   },\n                 }: TProps) => (\n  <div className='ui relaxed divided list'>\n    {\n      data.map(({ id, description, title }) => (\n        <VersionCard\n          key={id}\n          title={title}\n          description={description}\n          location={{ pathname: `${history.location.pathname}/${id}` }}\n        />\n      ))\n    }\n  </div>\n)\n\nconst composed: HOC<*, TProps> = compose(\n  inject(\n    'versionStore',\n  ),\n  lifecycle({\n    componentDidMount() {\n      this.props.versionStore.fetch()\n    },\n  }),\n  observer,\n)\nexport default composed(Version)","/** @flow **/\nimport * as React from 'react'\nimport { Fragment } from 'react'\nimport {\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport Interface from 'Features/interface'\nimport Execution from 'Features/execution'\nimport Home from 'Features/home'\nimport Breadcrumb from 'Features/breadcrumb'\nimport Blockly from 'Features/blockly'\nimport Program from 'Features/program'\nimport Version from 'Features/version'\n\nconst Wrapper = styled.div`\n  padding-left: 10px;\n  padding-top: 15px;\n`\n\nconst App = () => (\n  <Fragment>\n    <Breadcrumb/>\n    <Wrapper>\n      <Switch>\n        <Route path='/' exact to='/' component={Home}/>\n        <Route path='/interface/:id/program/:id/version/:id' component={Blockly}/>\n        <Route path='/interface/:id/program/:id/version' component={Version}/>\n        <Route path='/interface/:id/program' component={Program}/>\n        <Route path='/execution/:id' component={Blockly}/>\n        <Route path='/interface/:id' component={Blockly}/>\n        <Route path='/interface' component={Interface}/>\n        <Route path='/execution' component={Execution}/>\n        <Redirect from='*' to='/'/>\n      </Switch>\n    </Wrapper>\n  </Fragment>\n)\n\nexport default App\n","/** @flow **/\nimport axios from 'axios'\n\ntype TCallApi = {\n  url: string,\n  config: {},\n  onRequest: () => mixed,\n  onSuccess: (value: {}) => mixed,\n  onError: (value: any) => mixed,\n}\n\nexport const callApi = ({\n                          url,\n                          config,\n                          onRequest,\n                          onSuccess,\n                          onError,\n                        }: TCallApi) => {\n  onRequest()\n\n  return getResult(url, config)\n    .then(json => onSuccess(json))\n    .catch(error => onError(error.toString()))\n}\n\nexport const getResult = (url: string, config: {}) =>\n  axios.get(url, Object.assign({}, { crossDomain: true }, config))\n","export default {\n  API_ROOT: 'http://vzr.dgk.su',\n  API_BACKUP: 'https://django-business-logic-demo.dev.dgk.su',\n}\n","import { types } from 'mobx-state-tree'\nimport _ from 'lodash'\n\nimport { callApi } from 'Root/utils/callApi'\nimport routes from 'Config/routes'\n\nconst InterfaceDataItem = types.model({\n  code: types.union(types.string, types.null),\n  creation_time: types.string,\n  environment: types.number,\n  id: types.number,\n  modification_time: types.string,\n  title: types.string,\n  url: types.string,\n})\n\nconst InterfaceStore = types\n  .model('Store', {\n    isFetching: types.boolean,\n    error: types.null,\n    data: types.optional(types.array(InterfaceDataItem), []),\n  })\n  .actions(self => ({\n    setData(data) {\n      self.data = data\n    },\n    setFetching(fetchState) {\n      self.isFetching = fetchState\n    },\n    setError(error) {\n      self.error = error\n    },\n    fetch() {\n      const url = `${routes.API_BACKUP}/business-logic/rest/program-interface`\n\n      const body = {}\n\n      const config = {\n        method: 'POST',\n        body: JSON.stringify(body),\n      }\n\n      callApi({\n        url,\n        config,\n        onRequest: () => self.setFetching(true),\n        onSuccess: (json) => self.setData(_.get(json, 'data.results', [])),\n        onError: (error) => {\n          self.setFetching(false)\n          self.setError(error)\n        },\n      })\n    },\n  }))\n\nexport default InterfaceStore.create({\n  isFetching: false,\n  error: null,\n  data: [],\n})\n","import { types } from 'mobx-state-tree'\nimport _ from 'lodash'\n\nimport { callApi } from 'Root/utils/callApi'\nimport routes from 'Config/routes'\n\nconst ExecutionDataItem = types.model({\n  id: types.number,\n  start_time: types.string,\n  finish_time: types.string,\n  program_version: types.number,\n})\n\nconst ExecutionStore = types\n  .model('Store', {\n    isFetching: types.boolean,\n    error: types.null,\n    data: types.optional(types.array(ExecutionDataItem), []),\n  })\n  .actions(self => ({\n    setData(data) {\n      self.data = data\n    },\n    setFetching(fetchState) {\n      self.isFetching = fetchState\n    },\n    setError(error) {\n      self.error = error\n    },\n    fetch() {\n      const url = `${routes.API_BACKUP}/business-logic/rest/execution`\n\n      const body = {}\n\n      const config = {\n        method: 'POST',\n        body: JSON.stringify(body),\n      }\n\n      callApi({\n        url,\n        config,\n        onRequest: () => self.setFetching(true),\n        onSuccess: (json) => self.setData(_.get(json, 'data.results', [])),\n        onError: (error) => {\n          self.setFetching(false)\n          self.setError(error)\n        },\n      })\n    },\n  }))\n\nexport default ExecutionStore.create({\n  isFetching: false,\n  error: null,\n  data: [],\n})\n","import { types } from 'mobx-state-tree'\n\nconst ExecutionStore = types\n  .model('Store', {\n    location: types.string,\n  })\n  .actions(self => ({\n    setLocation(location) {\n      self.location = location\n    },\n  }))\n\nexport default ExecutionStore.create({\n  location: '/'\n})\n","import { types } from 'mobx-state-tree'\nimport _ from 'lodash'\n\nimport { callApi } from 'Root/utils/callApi'\nimport routes from 'Config/routes'\n\nconst ProgramDataItem = types.model({\n  id: types.number,\n  code: types.string,\n  creation_time: types.string,\n  environment: types.null,\n  modification_time: types.string,\n  program_interface: types.number,\n  title: types.string,\n  url: types.string,\n\n})\n\nconst ProgramStore = types\n  .model('Store', {\n    isFetching: types.boolean,\n    error: types.null,\n    data: types.optional(types.array(ProgramDataItem), []),\n  })\n  .actions(self => ({\n    setData(data) {\n      self.data = data\n    },\n    setFetching(fetchState) {\n      self.isFetching = fetchState\n    },\n    setError(error) {\n      self.error = error\n    },\n    fetch() {\n      const url = `${routes.API_BACKUP}/business-logic/rest/program?program_interface=1`\n\n      const body = {}\n\n      const config = {\n        method: 'POST',\n        body: JSON.stringify(body),\n      }\n\n      callApi({\n        url,\n        config,\n        onRequest: () => self.setFetching(true),\n        onSuccess: (json) => self.setData(_.get(json, 'data.results', [])),\n        onError: (error) => {\n          self.setFetching(false)\n          self.setError(error)\n        },\n      })\n    },\n  }))\n\nexport default ProgramStore.create({\n  isFetching: false,\n  error: null,\n  data: [],\n})\n","import { types } from 'mobx-state-tree'\nimport _ from 'lodash'\n\nimport { callApi } from 'Root/utils/callApi'\nimport routes from 'Config/routes'\n\nconst VersionDataItem = types.model({\n  id: types.number,\n  creation_time: types.string,\n  environment: types.null,\n  modification_time: types.string,\n  title: types.string,\n  url: types.string,\n  description: types.string,\n  is_default: types.boolean,\n  program: types.number,\n})\n\nconst VersionStore = types\n  .model('Store', {\n    isFetching: types.boolean,\n    error: types.null,\n    data: types.optional(types.array(VersionDataItem), []),\n  })\n  .actions(self => ({\n    setData(data) {\n      self.data = data\n    },\n    setFetching(fetchState) {\n      self.isFetching = fetchState\n    },\n    setError(error) {\n      self.error = error\n    },\n    fetch() {\n      const url = `${routes.API_BACKUP}/business-logic/rest/program-version?program=1`\n\n      const body = {}\n\n      const config = {\n        method: 'POST',\n        body: JSON.stringify(body),\n      }\n\n      callApi({\n        url,\n        config,\n        onRequest: () => self.setFetching(true),\n        onSuccess: (json) => self.setData(_.get(json, 'data.results', [])),\n        onError: (error) => {\n          self.setFetching(false)\n          self.setError(error)\n        },\n      })\n    },\n  }))\n\nexport default VersionStore.create({\n  isFetching: false,\n  error: null,\n  data: [],\n})\n","import Interface from 'Models/Interface'\nimport Execution from 'Models/Execution'\nimport Router from 'Models/Router'\nimport Program from 'Models/Program'\nimport Version from 'Models/Version'\n\nconst stores = {}\n\nObject.assign(stores, {\n  executionStore: Execution,\n  interfaceStore: Interface,\n  programStore: Program,\n  router: Router,\n  versionStore: Version,\n})\n\nexport default stores\n","/** @flow **/\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'mobx-react'\nimport { Router } from 'react-router-dom'\n\nimport App from 'Features/App'\nimport history from 'Root/history'\nimport stores from 'Root/models/index'\n\nconst Root = document.getElementById('root')\n\nif (Root) {\n  ReactDOM.render(\n    <Router history={history}>\n      <Provider {...stores}>\n        <App/>\n      </Provider>\n    </Router>,\n    Root,\n  )\n}\n\n"],"sourceRoot":""}